#version 420 core

in vec3 vertex_position;
in vec3 vertex_normal;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform vec3 eyePosition;

out VS_OUT
{
	vec3 vNormal;
	vec3 vLightDir;
	vec3 vViewDir;
	float vLightDistance2;
} vs_out;

// position of light
uniform vec3 lightPosition = vec3(100.0, 100.0, 100.0);

void main()
{
	vs_out.vNormal = (model * vec4(vertex_normal,0)).xyz;

	vec4 worldPosition = model * vec4(vertex_position, 1.0f);

	vs_out.vViewDir = normalize(eyePosition - worldPosition.xyz);
	vs_out.vLightDir = lightPosition - worldPosition.xyz;
	vs_out.vLightDistance2 = length(vs_out.vLightDir);
	vs_out.vLightDir /= vs_out.vLightDistance2;
	vs_out.vLightDistance2 *= vs_out.vLightDistance2;

	gl_Position = proj * view * worldPosition;
}