#version 420 core

in vec3 n_eye;

// output
layout (location = 0) out vec4 frag_colour;

// input from vertex shader
in VS_OUT
{
	vec3 N;
	vec3 L;
	vec3 V;
} fs_in;

// Material Properties
uniform vec3 diffuse_albedo = vec3(0.5, 0.2, 0.7);
uniform vec3 specular_albedo = vec3(0.7);
uniform float specular_power = 128.0;

void main()
{
	// Normalise the N, L, V vectors
	vec3 N = normalize(fs_in.N);
	vec3 L = normalize(fs_in.L);
	vec3 V = normalize(fs_in.V);

	// calculate R
	vec3 R = reflect(-L, N);
	
	// compute diffuse and specular components
	vec3 diffuse = max(dot(N, L), 0.0)*diffuse_albedo;
	vec3 specular = pow(max(dot(R,V), 0.0), specular_power) * specular_albedo;

	// final color
	frag_colour = vec4(diffuse + specular, 1.0);
}