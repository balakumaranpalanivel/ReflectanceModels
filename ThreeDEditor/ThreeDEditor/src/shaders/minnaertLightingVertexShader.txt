#version 420 core

layout (location = 7) in vec3 vertex_position;
layout (location = 8) in vec3 vertex_normal;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

out vec3 n_eye;
out VS_OUT
{
	vec3 N;
	vec3 L;
	vec3 V;
} vs_out;

// position of light
uniform vec3 light_pos = vec3(100.0, 100.0, 100.0);

void main()
{
	n_eye = (view * vec4 (vertex_normal, 0.0)).xyz;
	
	// view space co-ordinates
	vec4 P = view * model * vec4(vertex_position, 1.0);
	
	// calculate normal in view space
	vs_out.N = mat3(view * model) * vertex_normal;
	
	// calculate light position
	vs_out.L = light_pos - P.xyz;

	// calculate view 
	vs_out.V = -P.xyz;

	gl_Position = proj * P;

	//gl_Position =  proj * view * model * vec4 (vertex_position, 1.0);
}